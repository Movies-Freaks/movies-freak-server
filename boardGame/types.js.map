{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"AASA,MAAM,CAAN,IAAY,cAWX;AAXD,WAAY,cAAc;IACxB,iDAAQ,CAAA;IACR,2DAAa,CAAA;IACb,iEAAgB,CAAA;IAChB,mEAAiB,CAAA;IACjB,qEAAkB,CAAA;IAClB,+DAAe,CAAA;IACf,+DAAe,CAAA;IACf,6DAAc,CAAA;IACd,mFAAyB,CAAA;IACzB,6EAAsB,CAAA;AACxB,CAAC,EAXW,cAAc,KAAd,cAAc,QAWzB;AAAA,CAAC;AAKD,CAAC;AAUD,CAAC","sourcesContent":["import { Json } from '../types/common';\n\nexport type BoardGameErrorParams = {\n  error?: Error;\n  name?: string;\n  message?: string;\n  info?: {};\n};\n\nexport enum HTTPStatusCode {\n  OK = 200,\n  CREATED = 201,\n  NO_CONTENT = 204,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  PRECONDITION_FAILED = 412,\n  UNEXPECTED_ERROR = 500\n};\n\nexport interface SingleResponse {\n  status: HTTPStatusCode;\n  data: Json;\n};\n\nexport interface MultipleRespponse {\n  status: HTTPStatusCode;\n  data: {\n    skip: number;\n    limit: number;\n    totalItems: number;\n    items: Json[]\n  };\n};\n\nexport type Response = SingleResponse | MultipleRespponse;\n\nexport type Request = {\n  body: { [key: string]: any };\n  params: { [key: string]: any };\n  query: { [key: string]: any };\n};\n"]}