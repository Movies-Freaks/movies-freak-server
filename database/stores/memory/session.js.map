{"version":3,"file":"session.js","sourceRoot":"","sources":["session.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAItD,MAAM,qBAAqB;IAGzB;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAW,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,OAAgB;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAEK,kBAAkB,CAAC,MAAY;;YACnC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;YACzD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBAED,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;IAEK,MAAM,CAAC,OAAgB;;YAC3B,IAAI,eAAwB,CAAC;YAE7B,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,eAAe,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChD,CAAC;gBAED,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;CACF;AAED,eAAe,qBAAqB,CAAC","sourcesContent":["import Store from './store';\nimport { NotFound, SessionNotFound } from '../errors';\nimport { Session } from '../../../app/moviesFreak/entities';\nimport { UUID } from '../../../types/common';\n\nclass InMemorySessionsStore {\n  private store: Store<Session>;\n\n  constructor() {\n    this.store = new Store<Session>();\n  }\n\n  create(session: Session) {\n    return this.store.create(session);\n  }\n\n  async findActiveByUserId(userId: UUID) {\n    try {\n      return await this.store.findOne({ 'user.id': userId });\n    } catch (error: any) {\n      if (error instanceof NotFound) {\n        throw new SessionNotFound(userId);\n      }\n\n      throw error;\n    }\n  }\n\n  async update(session: Session) {\n    let sessionToUpdate: Session;\n\n    try {\n      return await this.store.update(session);\n    } catch (error: any) {\n      if (error instanceof NotFound) {\n        throw new SessionNotFound({ id: session.id });\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport default InMemorySessionsStore;\n"]}