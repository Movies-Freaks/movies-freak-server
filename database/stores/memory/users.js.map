{"version":3,"file":"users.js","sourceRoot":"","sources":["users.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,OAAO,EACL,kBAAkB,EAClB,QAAQ,EACR,YAAY,EACZ,qBAAqB,EACtB,MAAM,WAAW,CAAC;AAGnB,MAAM,kBAAkB;IAGtB;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;IACjC,CAAC;IAEK,MAAM,CAAC,IAAU;;YACrB,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnC,MAAM,IAAI,kBAAkB,EAAE,CAAC;YACjC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,CAAC,KAAK,YAAY,YAAY,CAAC,EAAE,CAAC;oBACrC,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzC,MAAM,IAAI,qBAAqB,EAAE,CAAC;YACpC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,CAAC,KAAK,YAAY,YAAY,CAAC,EAAE,CAAC;oBACrC,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;KAAA;IAEK,QAAQ,CAAC,MAAY;;YACzB,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,YAAY,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;gBACzC,CAAC;gBAED,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;IAEK,WAAW,CAAC,KAAa;;YAC7B,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAC7C,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;gBACpC,CAAC;gBAED,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;IAEK,cAAc,CAAC,QAAgB;;YACnC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,YAAY,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;gBACvC,CAAC;gBAED,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;KAAA;CACF;AAED,eAAe,kBAAkB,CAAC","sourcesContent":["import Store from './store';\nimport { User } from '../../../app/moviesFreak/entities';\nimport {\n  EmailAlreadyExists,\n  NotFound,\n  UserNotFound,\n  UsernameAlreadyExists\n} from '../errors';\nimport { UUID } from '../../../types/common';\n\nclass InMemoryUsersStore {\n  private store: Store<User>;\n\n  constructor() {\n    this.store = new Store<User>();\n  }\n\n  async create(user: User) {\n    try {\n      await this.findByEmail(user.email);\n      throw new EmailAlreadyExists();\n    } catch (error: any) {\n      if (!(error instanceof UserNotFound)) {\n        throw error;\n      }\n    }\n\n    try {\n      await this.findByUsername(user.username);\n      throw new UsernameAlreadyExists();\n    } catch (error: any) {\n      if (!(error instanceof UserNotFound)) {\n        throw error;\n      }\n    }\n\n    return this.store.create(user);\n  }\n\n  async findById(userId: UUID) {\n    try {\n      return await this.store.findById(userId);\n    } catch (error: any) {\n      if (error instanceof NotFound) {\n        throw new UserNotFound({ id: userId });\n      }\n\n      throw error;\n    }\n  }\n\n  async findByEmail(email: string) {\n    try {\n      return await this.store.findOne({ email });\n    } catch (error: any) {\n      if (error instanceof NotFound) {\n        throw new UserNotFound({ email });\n      }\n\n      throw error;\n    }\n  }\n\n  async findByUsername(username: string) {\n    try {\n      return await this.store.findOne({ username });\n    } catch (error: any) {\n      if (error instanceof NotFound) {\n        throw new UserNotFound({ username });\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport default InMemoryUsersStore;\n"]}