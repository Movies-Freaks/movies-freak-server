{"version":3,"file":"users.js","sourceRoot":"","sources":["users.ts"],"names":[],"mappings":"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","sourcesContent":["import { Knex } from 'knex';\nimport { omit } from 'lodash';\n\nimport { SQLDatabaseException } from './errors';\nimport { User } from '../../../app/moviesFreak/entities';\nimport { UserSerializer } from './serializers';\nimport { UUID } from '../../../types/common';\nimport {\n  EmailAlreadyExists,\n  UsernameAlreadyExists,\n  UserNotFound\n} from '../errors';\n\ninterface userRecord {\n  password_hash?: string;\n  password_salt?: string;\n}\n\nclass SQLUsersStore {\n  private connection: Knex;\n\n  constructor(connection: Knex) {\n    this.connection = connection;\n  }\n\n  async create(user: User) {\n    const dataToInsert = this.serialize(user);\n\n    let result: userRecord;\n\n    try {\n      [result] = await this.connection('users')\n        .returning('*')\n        .insert(dataToInsert);\n    } catch (error: any) {\n      if (error.constraint === 'users_email_unique') {\n        throw new EmailAlreadyExists();\n      }\n      if (error.constraint === 'users_username_unique') {\n        throw new UsernameAlreadyExists();\n      }\n\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  async findById(userId: UUID) {\n    return this.findOne({ id: userId });\n  }\n\n  async findByEmail(email: string) {\n    return this.findOne({ email });\n  }\n\n  async findByUsername(username: string) {\n    return this.findOne({ username });\n  }\n\n  private async findOne(query: {}) {\n    let result: userRecord;\n\n    try {\n      result = await this.connection('users')\n        .where(query)\n        .first();\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new UserNotFound(query);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(user: User): {} {\n    const result = UserSerializer.toJSON(user);\n\n    return {\n      ...omit(result, ['id', 'created_at', 'updated_at']),\n      password_hash: user.password.hash,\n      password_salt: user.password.salt\n    };\n  }\n\n  private deserialize(data: userRecord) {\n    const user = UserSerializer.fromJSON(data);\n\n    user.password = {\n      hash: data.password_hash,\n      salt: data.password_salt\n    };\n\n    return user;\n  }\n}\n\nexport default SQLUsersStore;\n"]}