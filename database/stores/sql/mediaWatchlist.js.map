{"version":3,"file":"mediaWatchlist.js","sourceRoot":"","sources":["mediaWatchlist.ts"],"names":[],"mappings":";;;;;;;;;AAGA,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,oBAAoB,EAAE,MAAM,UAAU,CAAC;AAEhD,MAAM,uBAAuB;IAI3B,YAAY,UAAgB,EAAE,QAAa;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEK,MAAM,CAAC,cAA8B;;YACzC,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAEpD,IAAI,MAAU,CAAC;YAEf,IAAI,CAAC;gBACH,CAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;qBACjD,SAAS,CAAC,GAAG,CAAC;qBACd,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1B,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACxC,CAAC;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;KAAA;IAEO,SAAS,CAAC,cAA8B;QAC9C,OAAO,wBAAwB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAEa,WAAW,CAAC,IAAQ;;YAChC,MAAM,cAAc,GAAG,wBAAwB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE/D,IAAI,cAAc,CAAC,SAAS,KAAK,MAAM,EAAE,CAAC;gBACxC,cAAc,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ;qBACtC,KAAK;qBACL,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;iBAAM,IAAI,cAAc,CAAC,SAAS,KAAK,WAAW,EAAE,CAAC;gBACpD,cAAc,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ;qBAC3C,UAAU;qBACV,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC1C,CAAC;YAED,OAAO,cAAc,CAAC;QACxB,CAAC;KAAA;CACF;AAED,eAAe,uBAAuB,CAAC","sourcesContent":["import { Knex } from 'knex';\n\nimport { MediaWatchlist } from '../../../app/moviesFreak/entities';\nimport { MediaWatchlistSerializer } from './serializers';\nimport { SQLDatabaseException } from './errors';\n\nclass SQLMediaWatchlistsStore {\n  private connection: Knex;\n  private database: any;\n\n  constructor(connection: Knex, database: any) {\n    this.connection = connection;\n    this.database = database;\n  }\n\n  async create(mediaWatchlist: MediaWatchlist) {\n    const dataToInsert = this.serialize(mediaWatchlist);\n\n    let result: {};\n\n    try {\n      [result] = await this.connection('media_watchlists')\n        .returning('*')\n        .insert(dataToInsert);\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(mediaWatchlist: MediaWatchlist) {\n    return MediaWatchlistSerializer.toJSON(mediaWatchlist);\n  }\n\n  private async deserialize(data: {}) {\n    const mediaWatchlist = MediaWatchlistSerializer.fromJSON(data);\n\n    if (mediaWatchlist.mediaType === 'film') {\n      mediaWatchlist.film = await this.database\n        .films\n        .findById(mediaWatchlist.filmId);\n    } else if (mediaWatchlist.mediaType === 'tvEpisode') {\n      mediaWatchlist.tvEpisode = await this.database\n        .tvEpisodes\n        .findById(mediaWatchlist.tvEpisodeId);\n    }\n\n    return mediaWatchlist;\n  }\n}\n\nexport default SQLMediaWatchlistsStore;\n"]}