{"version":3,"file":"films.js","sourceRoot":"","sources":["films.ts"],"names":[],"mappings":"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","sourcesContent":["import { Knex } from 'knex';\n\nimport { Film } from '../../../app/moviesFreak/entities';\nimport { FilmNotFound, IMDBIdAlreadyExists } from '../errors';\nimport { FilmSerializer } from './serializers';\nimport { SQLDatabaseException } from './errors';\nimport { UUID } from '../../../types/common';\nimport { QueryOptions, QueryResponse } from '../../../types/database';\n\nclass SQLFilmsStore {\n  private connection: Knex;\n\n  constructor(connection: Knex) {\n    this.connection = connection;\n  }\n\n  async create(film: Film) {\n    const dataToInsert = this.serialize(film);\n\n    let result: {};\n\n    try {\n      [result] = await this.connection('films')\n        .returning('*')\n        .insert(dataToInsert);\n    } catch (error: any) {\n      if (error.constraint === 'films_imdb_id_unique') {\n        throw new IMDBIdAlreadyExists(film.imdbId);\n      }\n\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  findById(filmId: UUID) {\n    return this.findOne({ id: filmId });\n  }\n\n  async find(options: QueryOptions = {}): Promise<QueryResponse<Film>> {\n    let items: {}[];\n\n    try {\n      const query = this.connection('films');\n\n      if (options.skip) {\n        query.offset(options.skip);\n      }\n\n      if (options.limit) {\n        query.limit(options.limit);\n      }\n\n      items = await query.orderBy('created_at');\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return {\n      items: items.map(this.deserialize.bind(this)),\n      totalItems: await this.count()\n    };\n  }\n\n  async count() {\n    try {\n      const result = await this.connection('films')\n        .count()\n        .first();\n\n      if (!result) {\n        return 0;\n      }\n\n      return Number(result.count);\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n  }\n\n  private async findOne(query = {}) {\n    let result: {};\n\n    try {\n      result = await this.connection('films')\n        .where(query)\n        .first();\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new FilmNotFound(query);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(film: Film) {\n    return FilmSerializer.toJSON(film);\n  }\n\n  private deserialize(data: {}) {\n    return FilmSerializer.fromJSON(data);\n  }\n}\n\nexport default SQLFilmsStore;\n"]}