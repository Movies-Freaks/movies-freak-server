{"version":3,"file":"serializer.js","sourceRoot":"","sources":["serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNil, get as getKey, set as setKey } from 'lodash';\n\nimport { FieldObject, FieldOptions } from '../../../types/serializer';\nimport { Json } from '../../../types/common';\n\nexport class SerializerError extends Error {}\n\nexport class MissingSchema extends SerializerError {\n  constructor() {\n    super('Schema has not been provided');\n  }\n}\n\nexport class Schema {\n  private fields: string[];\n\n  constructor() {\n    this.fields = [];\n  }\n\n  addField(field: FieldObject) {\n    setKey(this, field.name, field.options)\n\n    this.fields.push(field.name);\n  }\n\n  getField(fieldName: string) {\n    return getKey(this, fieldName)\n  }\n\n  forEachField(callback: Function) {\n    this.fields.forEach((field: string) => callback(field, getKey(this, field)));\n  }\n}\n\nclass Field {\n  readonly name: string;\n  readonly options: FieldOptions;\n\n  constructor(name: string, options: FieldOptions = {}) {\n    this.name = name;\n    this.options = options;\n  }\n}\n\nclass Serializer<T> {\n  schema?: Schema;\n  private target: T | any;\n\n  constructor(target: T) {\n    this.target = target;\n  }\n\n  static init<D>(target: any) {\n    return new Serializer<D>(target);\n  }\n\n  addSchema(...args: Field[]) {\n    this.schema = new Schema();\n\n    args.forEach((field: Field) => this.schema?.addField(field));\n\n    return this;\n  }\n\n  fromJSON(data: {}): T {\n    if (!this.schema) {\n      throw new MissingSchema();\n    }\n\n    const result: Json = {};\n\n    this.schema.forEachField((field: string, options: FieldOptions) => {\n      const key = options.from || field;\n      let value = getKey(data, field);\n\n      if (options.as === 'array') {\n        value = value?.split(',');\n      } else if (options.as === 'json') {\n        value = value && JSON.parse(value);\n      }\n\n      result[key] = value;\n    });\n\n    return new this.target(result);\n  }\n\n  toJSON(entity: T | Json): Json {\n    if (!this.schema) {\n      throw new MissingSchema();\n    }\n\n    const result: Json = {};\n\n    this.schema.forEachField((field: string, options: FieldOptions) => {\n      const key = options.from || field;\n      let value = getKey(entity, key);\n\n      if (isNil(value)) {\n        value = undefined;\n      } else if (options.as === 'array') {\n        value = value.join(',');\n      } else if (options.as === 'json') {\n        value = value && JSON.stringify(value);\n      }\n\n      result[field] = value;\n    });\n\n    return result;\n  }\n}\n\nexport function field(name: string, options: FieldOptions = {}) {\n  return new Field(name, options);\n}\n\nexport default Serializer;\n"]}