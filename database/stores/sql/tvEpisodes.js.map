{"version":3,"file":"tvEpisodes.js","sourceRoot":"","sources":["tvEpisodes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Knex } from 'knex';\n\nimport { QueryOptions, QueryResponse } from '../../../types/database';\nimport { SQLDatabaseException } from './errors';\nimport { TVEpisode } from '../../../app/moviesFreak/entities';\nimport { TVEpisodeNotFound } from '../errors';\nimport { TVEpisodeSerializer } from './serializers';\nimport { UUID } from '../../../types/common';\n\nclass SQLTVEpisodeStore {\n  private connection: Knex;\n\n  constructor(connection: Knex) {\n    this.connection = connection;\n  }\n\n  async create(tvEpisode: TVEpisode) {\n    const dataToInsert = this.serialize(tvEpisode);\n\n    let result: {};\n\n    try {\n      [result] = await this.connection('tv_episodes')\n        .returning('*')\n        .insert(dataToInsert);\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  findById(tvEpisodeId: UUID) {\n    return this.findOne({ id: tvEpisodeId });\n  }\n\n  async findByTVSeasonId(tvSeasonId: UUID, options: QueryOptions = {}): Promise<QueryResponse<TVEpisode>> {\n    let items: {}[];\n\n    try {\n      const query = this.connection('tv_episodes')\n        .where('tv_season_id', tvSeasonId);\n\n      if (options.skip) {\n        query.offset(options.skip);\n      }\n\n      if (options.limit) {\n        query.limit(options.limit);\n      }\n\n      items = await query.orderBy('episode_number');\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return {\n      items: items.map(this.deserialize.bind(this)),\n      totalItems: await this.countByTvSeasonId(tvSeasonId)\n    };\n  }\n\n  async countByTvSeasonId(tvSeasonId: UUID) {\n    try {\n      const result = await this.connection('tv_episodes')\n        .where('tv_season_id', tvSeasonId)\n        .count()\n        .first();\n\n      return Number(result?.count);\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n  }\n\n  private async findOne(query: {}) {\n    let result: {};\n\n    try {\n      result = await this.connection('tv_episodes')\n        .where(query)\n        .first();\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new TVEpisodeNotFound(query);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(tvEpisode: TVEpisode) {\n    return TVEpisodeSerializer.toJSON(tvEpisode);\n  }\n\n  private deserialize(data: {}) {\n    return TVEpisodeSerializer.fromJSON(data);\n  }\n}\n\nexport default SQLTVEpisodeStore;\n"]}