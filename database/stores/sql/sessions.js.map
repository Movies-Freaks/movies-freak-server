{"version":3,"file":"sessions.js","sourceRoot":"","sources":["sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Knex } from 'knex';\nimport { omit, pick } from 'lodash';\n\nimport { Session } from '../../../app/moviesFreak/entities';\nimport { SessionNotFound } from '../errors';\nimport { SessionSerializer } from './serializers';\nimport { SQLDatabaseException } from './errors';\nimport { Json, UUID } from '../../../types/common';\n\ninterface sessionRecord {\n  user_id?: UUID\n}\n\nclass SQLSessionsStore {\n  private connection: Knex;\n  private database: any;\n\n  constructor(connection: Knex, database: any) {\n    this.connection = connection;\n    this.database = database;\n  }\n\n  async create(session: Session) {\n    const dataToInsert: Json = this.serialize(session);\n\n    let result: sessionRecord;\n\n    try {\n      [result] = await this.connection('sessions')\n      .returning('*')\n      .insert(dataToInsert)\n\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  findActiveByUserId(userId: UUID) {\n    return this.findOne({\n      is_active: true,\n      user_id: userId\n    });\n  }\n\n  async update(session: Session) {\n    const data = this.serialize(session);\n\n    let result: sessionRecord;\n\n    try {\n      [result] = await this.connection('sessions')\n        .returning('*')\n        .where('id', session.id)\n        .update({\n          ...pick(data, ['token', 'expires_at', 'is_active']),\n          updated_at: new Date()\n        });\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new SessionNotFound({ id: session.id });\n    }\n\n    return this.deserialize(result);\n  }\n\n  private async findOne(query: {}) {\n    let result: sessionRecord;\n\n    try {\n      result = await this.connection('sessions')\n        .where(query)\n        .orderBy('created_at', 'desc')\n        .first();\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new SessionNotFound(query);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(session: Session): sessionRecord {\n    const result = SessionSerializer.toJSON(session);\n    result.is_active = session.isActive();\n    result.expires_at = session.expiresAt;\n\n    return { ...omit(result, 'id'), user_id: session.user?.id };\n  }\n\n  private async deserialize(data: sessionRecord) {\n    const session = SessionSerializer.fromJSON(data);\n    session.user = await this.database.users.findById(data.user_id);\n\n    return session;\n  }\n}\n\nexport default SQLSessionsStore;\n"]}