{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,aAAa,MAAM,SAAS,CAAC;AACpC,OAAO,uBAAuB,MAAM,kBAAkB,CAAC;AACvD,OAAO,gBAAgB,MAAM,YAAY,CAAC;AAC1C,OAAO,iBAAiB,MAAM,cAAc,CAAC;AAC7C,OAAO,gBAAgB,MAAM,YAAY,CAAC;AAC1C,OAAO,gBAAgB,MAAM,YAAY,CAAC;AAC1C,OAAO,aAAa,MAAM,SAAS,CAAC;AACpC,OAAO,kBAAkB,MAAM,cAAc,CAAC;AAE9C,MAAM,WAAW;IAWf,YAAY,UAAgB;QAC1B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,eAAe,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1E,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,UAAU,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5D,CAAC;IAEK,eAAe,CAAC,EAAY,EAAE,GAAG,IAAW;;YAChD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YAE7C,OAAO,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;QAClC,CAAC;KAAA;IAEa,WAAW;;YACvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAEvD,MAAM,UAAU,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;YAEzE,OAAO,IAAI,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC;KAAA;CACF;AAED,MAAM,sBAAuB,SAAQ,WAAW;IACxC,MAAM,CAAC,QAAa;;YACxB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAE/B,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;IAEK,QAAQ,CAAC,KAAY;;YACzB,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YAEjC,MAAM,KAAK,CAAC;QACd,CAAC;KAAA;CACF;AAED,eAAe,WAAW,CAAC","sourcesContent":["import { Knex } from 'knex';\n\nimport SQLFilmsStore from './films';\nimport SQLMediaWatchlistsStore from './mediaWatchlist';\nimport SQLSessionsStore from './sessions';\nimport SQLTVEpisodeStore from './tvEpisodes';\nimport SQLTVSeasonStore from './tvSeason';\nimport SQLTVSeriesStore from './tvSeries';\nimport SQLUsersStore from './users';\nimport SQLWatchlistsStore from './watchlists';\n\nclass SQLDatabase {\n  readonly connection: any;\n  readonly films: SQLFilmsStore;\n  readonly mediaWatchlists: SQLMediaWatchlistsStore;\n  readonly sessions: SQLSessionsStore;\n  readonly tvEpisodes: SQLTVEpisodeStore;\n  readonly tvSeasons: SQLTVSeasonStore;\n  readonly tvSeries: SQLTVSeriesStore;\n  readonly users: SQLUsersStore;\n  readonly watchlists: SQLWatchlistsStore;\n\n  constructor(connection: Knex) {\n    this.connection = connection;\n\n    this.films = new SQLFilmsStore(this.connection);\n    this.mediaWatchlists = new SQLMediaWatchlistsStore(this.connection, this);\n    this.sessions = new SQLSessionsStore(this.connection, this);\n    this.tvEpisodes = new SQLTVEpisodeStore(this.connection);\n    this.tvSeasons = new SQLTVSeasonStore(this.connection);\n    this.tvSeries = new SQLTVSeriesStore(this.connection);\n    this.users = new SQLUsersStore(this.connection);\n    this.watchlists = new SQLWatchlistsStore(this.connection);\n  }\n\n  async withTransaction(fn: Function, ...args: any[]) {\n    const transaction = await this.transaction();\n\n    return fn(transaction, ...args);\n  }\n\n  private async transaction() {\n    const connection = await this.connection.transaction();\n\n    await connection.raw('SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;');\n\n    return new SQLTransactionDatabase(connection);\n  }\n}\n\nclass SQLTransactionDatabase extends SQLDatabase {\n  async commit(response: any) {\n    await this.connection.commit();\n\n    return response;\n  }\n\n  async rollback(error: Error) {\n    await this.connection.rollback();\n\n    throw error;\n  }\n}\n\nexport default SQLDatabase;\n"]}