{"version":3,"file":"tvSeries.js","sourceRoot":"","sources":["tvSeries.ts"],"names":[],"mappings":"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","sourcesContent":["import { Knex } from 'knex';\n\nimport { IMDBIdAlreadyExists, TVSerieNotFound } from '../errors';\nimport { QueryOptions, QueryResponse } from '../../../types/database';\nimport { SQLDatabaseException } from './errors';\nimport { TVSerie } from '../../../app/moviesFreak/entities';\nimport { TVSerieSerializer } from './serializers';\nimport { UUID } from '../../../types/common';\n\nclass SQLTVSeriesStore {\n  private connection: Knex;\n\n  constructor(connection: Knex) {\n    this.connection = connection;\n  }\n\n  async create(tvSerie: TVSerie) {\n    const dataToInsert = this.serialize(tvSerie);\n\n    let result: {};\n\n    try {\n      [result] = await this.connection('tv_series')\n        .returning('*')\n        .insert(dataToInsert);\n    } catch (error: any) {\n      if (error.constraint === 'tv_series_imdb_id_unique') {\n        throw new IMDBIdAlreadyExists(tvSerie.imdbId);\n      }\n\n      throw new SQLDatabaseException(error);\n    }\n\n    return this.deserialize(result);\n  }\n\n  findById(tvSerieId: UUID) {\n    return this.findOne({ id: tvSerieId });\n  }\n\n  async find(options: QueryOptions = {}): Promise<QueryResponse<TVSerie>> {\n    let items: {}[];\n\n    try {\n      const query = this.connection('tv_series');\n\n      if (options.skip) {\n        query.offset(options.skip);\n      }\n\n      if (options.limit) {\n        query.limit(options.limit);\n      }\n\n      items = await query.orderBy('created_at');\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    return {\n      items: items.map(this.deserialize.bind(this)),\n      totalItems: await this.count()\n    };\n  }\n\n  async count() {\n    try {\n      const result = await this.connection('tv_series')\n        .count()\n        .first();\n\n      return Number(result?.count);\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n  }\n\n  private async findOne(query: {}) {\n    let result: {};\n\n    try {\n      result = await this.connection('tv_series')\n        .where(query)\n        .first();\n    } catch (error: any) {\n      throw new SQLDatabaseException(error);\n    }\n\n    if (!result) {\n      throw new TVSerieNotFound(query);\n    }\n\n    return this.deserialize(result);\n  }\n\n  private serialize(tvSerie: TVSerie) {\n    return TVSerieSerializer.toJSON(tvSerie);\n  }\n\n  private deserialize(data: {}) {\n    return TVSerieSerializer.fromJSON(data);\n  }\n}\n\nexport default SQLTVSeriesStore;\n"]}