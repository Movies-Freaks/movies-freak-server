{"version":3,"file":"createFilm.js","sourceRoot":"","sources":["createFilm.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAE9C,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAGlC,MAAM,UAAU;IAKd,YAAY,QAAkB,EAAE,IAAiB,EAAE,MAAc;QAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEK,OAAO;;YACX,IAAI,UAAsB,CAAC;YAE3B,IAAI,CAAC;gBACH,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1D,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC;YAED,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAEtD,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAChD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;KAAA;IAEO,uBAAuB,CAAC,UAAsB;QACpD,OAAO,IAAI,IAAI,CAAC;YACd,IAAI,EAAE,UAAU,CAAC,KAAK;YACtB,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,UAAU,EAAE,UAAU,CAAC,UAAU;YACjC,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,MAAM,EAAE,UAAU,CAAC,MAAM;YACzB,UAAU,EAAE,UAAU,CAAC,UAAU;SAClC,CAAC,CAAC;IACL,CAAC;CACF;AAED,eAAe,UAAU,CAAC","sourcesContent":["import { CouldNotCreateFilm } from './errors';\nimport { Database } from '../../types/database';\nimport { Film } from './entities';\nimport { FilmResult, IMDBGateway } from '../../types/app';\n\nclass CreateFilm {\n  database: Database;\n  imdb: IMDBGateway;\n  imdbId: string;\n\n  constructor(database: Database, imdb: IMDBGateway, imdbId: string) {\n    this.database = database;\n    this.imdb = imdb;\n    this.imdbId = imdbId;\n  }\n\n  async execute() {\n    let imdbResult: FilmResult;\n\n    try {\n      imdbResult = await this.imdb.fetchFilmById(this.imdbId);\n    } catch (error: any) {\n      throw new CouldNotCreateFilm(error);\n    }\n\n    const film = this.buildFilmFromIMDBResult(imdbResult);\n\n    try {\n      return await this.database.films.create(film);\n    } catch (error: any) {\n      throw new CouldNotCreateFilm(error);\n    }\n  }\n\n  private buildFilmFromIMDBResult(imdbResult: FilmResult) {\n    return new Film({\n      name: imdbResult.title,\n      plot: imdbResult.plot,\n      title: imdbResult.title,\n      year: imdbResult.year,\n      rated: imdbResult.rated,\n      runtime: imdbResult.runtime,\n      director: imdbResult.director,\n      poster: imdbResult.poster,\n      production: imdbResult.production,\n      genre: imdbResult.genre,\n      writers: imdbResult.writers,\n      actors: imdbResult.actors,\n      imdbId: imdbResult.imdbId,\n      imdbRating: imdbResult.imdbRating\n    });\n  }\n}\n\nexport default CreateFilm;\n"]}