{"version":3,"file":"signUp.js","sourceRoot":"","sources":["signUp.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG9B,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAE3C,OAAO,EACL,kBAAkB,EAClB,qBAAqB,EACtB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EACL,cAAc,EACd,gBAAgB,EAChB,mBAAmB,EACpB,MAAM,UAAU,CAAC;AAElB,MAAM,MAAM;IAIV,YAAY,QAAkB,EAAE,QAAoB;QAClD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEK,OAAO;;YACX,IAAI,WAAiB,CAAC;YAEtB,IAAI,CAAC;gBACH,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;gBAEvD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACzC,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,kBAAkB,EAAE,CAAC;oBACxC,MAAM,IAAI,gBAAgB,EAAE,CAAC;gBAC/B,CAAC;gBAED,IAAI,KAAK,YAAY,qBAAqB,EAAE,CAAC;oBAC3C,MAAM,IAAI,mBAAmB,EAAE,CAAC;gBAClC,CAAC;gBAED,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;YAEnD,OAAO,CAAC,aAAa,EAAE;iBACpB,aAAa,EAAE,CAAC;YAEnB,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;QACH,CAAC;KAAA;CACF;AAED,eAAe,MAAM,CAAC","sourcesContent":["import { omit } from 'lodash';\n\nimport { Database } from '../../types/database';\nimport { Session, User } from './entities';\nimport { SignUpData } from '../../types/app';\nimport {\n  EmailAlreadyExists,\n  UsernameAlreadyExists\n} from '../../database/stores/errors';\nimport {\n  CouldNotSignUp,\n  EmailAlreadyUsed,\n  UsernameAlreadyUsed\n} from './errors';\n\nclass SignUp {\n  database: Database;\n  userData: SignUpData;\n\n  constructor(database: Database, userData: SignUpData) {\n    this.database = database;\n    this.userData = userData;\n  }\n\n  async execute() {\n    let userCreated: User;\n\n    try {\n      const user = new User(omit(this.userData, 'password'));\n\n      user.addPassword(this.userData.password);\n      userCreated = await this.database.users.create(user);\n    } catch (error: any) {\n      if (error instanceof EmailAlreadyExists) {\n        throw new EmailAlreadyUsed();\n      }\n\n      if (error instanceof UsernameAlreadyExists) {\n        throw new UsernameAlreadyUsed();\n      }\n\n      throw new CouldNotSignUp(error);\n    }\n\n    const session = new Session({ user: userCreated });\n\n    session.generateToken()\n      .activateToken();\n\n    try {\n      return await this.database.sessions.create(session);\n    } catch (error: any) {\n      throw new CouldNotSignUp(error);\n    }\n  }\n}\n\nexport default SignUp;\n"]}