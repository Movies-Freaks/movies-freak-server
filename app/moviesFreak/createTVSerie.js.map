{"version":3,"file":"createTVSerie.js","sourceRoot":"","sources":["createTVSerie.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { IMDBEpisode, IMDBGateway } from '../../types/app';\nimport { Database } from '../../types/database';\nimport { TVEpisode, TVSeason, TVSerie } from './entities';\nimport {\n  CouldNotCreateTVEpisodes,\n  CouldNotCreateTVSeasons,\n  CouldNotCreateTVSerie\n} from './errors';\n\nclass CreateTVSerie {\n  database: Database;\n  imdb: IMDBGateway;\n  imdbId: string;\n\n  constructor(database: Database, imdb: IMDBGateway, imdbId: string) {\n    this.database = database;\n    this.imdb = imdb;\n    this.imdbId = imdbId;\n  }\n\n  async execute(): Promise<TVSerie> {\n    let imdbTVSerie: TVSerie;\n\n    try {\n      imdbTVSerie = await this.fetchTVSerieFromIMDB();\n    } catch (error: any) {\n      throw new CouldNotCreateTVSerie(error);\n    }\n\n    return this.database.withTransaction(async (database: Database) => {\n      let tvSerie: TVSerie;\n\n      try {\n        tvSerie = await database.tvSeries.create(imdbTVSerie);\n      } catch (error: any) {\n        throw new CouldNotCreateTVSerie(error);\n      }\n\n      for (let seasonNumber = 1; seasonNumber <= tvSerie?.totalSeasons; seasonNumber += 1) {\n        let result: {\n          tvSeason: TVSeason;\n          episodes: IMDBEpisode[];\n        };\n\n        let tvSeason: TVSeason;\n\n        try {\n          result = await this.fetchTVSeasonFromIMDB(tvSerie, seasonNumber);\n          tvSeason = await database.tvSeasons.create(result.tvSeason);\n        } catch (error: any) {\n          throw new CouldNotCreateTVSeasons(error);\n        }\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const episode of result.episodes) {\n          try {\n            const tvEpisode = await this.fetchTVEpisodenFromIMDB(tvSeason, episode);\n            await database.tvEpisodes.create(tvEpisode);\n          } catch (error: any) {\n            throw new CouldNotCreateTVEpisodes(error);\n          }\n        }\n      }\n\n      return tvSerie;\n    });\n  }\n\n  private async fetchTVSerieFromIMDB() {\n    const result = await this.imdb.fetchTVSerieById(this.imdbId);\n\n    return new TVSerie({\n      imdbId: result.imdbId,\n      name: result.title,\n      plot: result.plot,\n      years: result.years,\n      rated: result.rated,\n      genre: result.genre,\n      writers: result.writers,\n      actors: result.actors,\n      poster: result.poster,\n      imdbRating: result.imdbRating,\n      totalSeasons: result.totalSeasons,\n      releasedAt: result.releasedAt\n    });\n  }\n\n  private async fetchTVSeasonFromIMDB(tvSerie: TVSerie, seasonNumber: number) {\n    const result = await this.imdb.fetchTVSeasonBySerieId(this.imdbId, seasonNumber);\n\n    const tvSeason = new TVSeason({\n      seasonNumber,\n      tvSerieId: tvSerie.id,\n      plot: tvSerie.plot,\n      poster: tvSerie.poster\n    });\n\n    return { tvSeason, episodes: result.episodes };\n  }\n\n  private async fetchTVEpisodenFromIMDB(tvSeason: TVSeason, episode: IMDBEpisode) {\n    const result = await this.imdb.fetchTVEpisodeById(this.imdbId);\n\n    return new TVEpisode({\n      imdbId: episode.imdbId || result.imdbId,\n      name: episode.title || result.title,\n      year: episode.releasedDate.getFullYear(),\n      seasonNumber: tvSeason.seasonNumber || result.numberOfSeason,\n      episodeNumber: episode.numberOfEpisode || result.numberOfEpisode,\n      genre: result.genre,\n      director: result.director,\n      writers: result.writers,\n      actors: result.actors,\n      plot: result.plot,\n      languages: result.language,\n      country: result.country,\n      poster: result.poster,\n      awards: result.awards,\n      imdbRating: result.imdbRating,\n      releasedAt: episode.releasedDate,\n      tvSerieId: tvSeason.tvSerieId,\n      tvSeasonId: tvSeason.id\n    });\n  }\n}\n\nexport default CreateTVSerie;\n"]}