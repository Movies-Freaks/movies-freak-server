{"version":3,"file":"user.js","sourceRoot":"","sources":["user.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAEjC,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAE7D,MAAM,IAAK,SAAQ,MAAM;IAQvB,YAAY,IAAgB;QAC1B,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE/C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAEhC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,QAAQ,CAAC,QAAkB;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,aAAa,CAAC,UAAU,CAAC,CAAA;QACrC,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,WAAW,CAAC,QAAgB;QAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAClC,CAAC;IAED,iBAAiB,CAAC,QAAgB;QAChC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACzB,MAAM,IAAI,kBAAkB,EAAE,CAAC;QACjC,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAEtE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC;IAC9C,CAAC;IAEO,YAAY;QAClB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;aACzB,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IAEO,YAAY,CAAC,IAAY,EAAE,QAAgB;QACjD,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAE/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;CACF;AAED,eAAe,IAAI,CAAC","sourcesContent":["import Crypto from 'crypto';\nimport { isEmpty } from 'lodash';\n\nimport Entity from './entity';\nimport { Password, UserEntity } from '../../../types/entities';\nimport { ReadOnlyField, UserHasNotPassword } from './errors';\n\nclass User extends Entity implements UserEntity {\n  private _password: Password;\n  name: string;\n  username: string;\n  lastName?: string;\n  email: string; // email\n  birthdate?: Date;\n\n  constructor(args: UserEntity) {\n    super(args.id, args.createdAt, args.updatedAt);\n\n    this.name = args.name;\n    this.username = args.username;\n    this.lastName = args.lastName;\n    this.email = args.email;\n    this.birthdate = args.birthdate;\n\n    this._password = {};\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  set password(password: Password) {\n    if (!isEmpty(this._password)) {\n      throw new ReadOnlyField('password')\n    }\n\n    this._password = password;\n  }\n\n  addPassword(password: string) {\n    const salt = this.generateSalt();\n    const hash = this.hashPassword(salt, password);\n\n    this._password = { salt, hash };\n  }\n\n  doesPasswordMatch(password: string) {\n    if (!this._password.salt) {\n      throw new UserHasNotPassword();\n    }\n\n    const passwordHash = this.hashPassword(this._password.salt, password);\n\n    return this._password.hash === passwordHash;\n  }\n\n  private generateSalt() {\n    return Crypto.randomBytes(8)\n      .toString('hex');\n  }\n\n  private hashPassword(salt: string, password: string) {\n    const hash = Crypto.createHmac('sha512', salt);\n\n    hash.update(password);\n    return hash.digest('hex');\n  }\n}\n\nexport default User;\n"]}