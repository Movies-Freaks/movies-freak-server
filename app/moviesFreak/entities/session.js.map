{"version":3,"file":"session.js","sourceRoot":"","sources":["session.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,OAAO,EAAE,aAAa,EAAE,oBAAoB,EAAE,MAAM,UAAU,CAAC;AAG/D,MAAM,OAAQ,SAAQ,MAAM;IAM1B,YAAY,IAAmB;QAC7B,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;IAC1C,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI,CAAC,IAAU;QACjB,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;aACjC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEnB,IAAI,CAAC,UAAU,GAAI,IAAI,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YACpB,MAAM,IAAI,oBAAoB,EAAE,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAEtC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;IACtC,CAAC;IAED,eAAe;QACb,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,eAAe,OAAO,CAAC","sourcesContent":["import Crypto from 'crypto';\n\nimport Entity from './entity';\nimport User from './user';\nimport { ReadOnlyField, SessionAlreadyActive } from './errors';\nimport SessionEntity from '../../../types/entities/session';\n\nclass Session extends Entity {\n  private _user?: User;\n  private _expiresAt?: Date | null;\n  private _isActive?: boolean;\n  private _token?: string;\n\n  constructor(args: SessionEntity) {\n    super(args.id, args.createdAt, args.updatedAt);\n\n    this._user = args.user;\n    this._token = args.token;\n    this._expiresAt = args.expiresAt;\n    this._isActive = args.isActive || false;\n  }\n\n  get token(): string | undefined {\n    return this._token;\n  }\n\n  get expiresAt() {\n    return this._expiresAt;\n  }\n\n  get user(): User | undefined {\n    return this._user;\n  }\n\n  set user(user: User) {\n    if (this._user) {\n      throw new ReadOnlyField('user');\n    }\n\n    this._user = user;\n  }\n\n  isActive() {\n    return this._isActive;\n  }\n\n  generateToken() {\n    this._token = Crypto.randomBytes(32)\n      .toString('hex');\n\n    this._expiresAt =  null;\n    this._isActive = false;\n\n    return this;\n  }\n\n  activateToken() {\n    if (this.isActive()) {\n      throw new SessionAlreadyActive();\n    }\n\n    this._expiresAt = new Date();\n    const day = this._expiresAt.getDate();\n\n    this._expiresAt.setDate(day + 2);\n    this._isActive = true;\n\n    return this;\n  }\n\n  isExpired() {\n    if (!this._expiresAt) {\n      return true;\n    }\n\n    return this._expiresAt < new Date();\n  }\n\n  reactivateToken() {\n    this._isActive = false;\n\n    return this.activateToken();\n  }\n\n  deactivateToken() {\n    if (!this.isExpired()) {\n      this._expiresAt = new Date();\n    }\n\n    this._isActive = false;\n\n    return this;\n  }\n}\n\nexport default Session;\n"]}