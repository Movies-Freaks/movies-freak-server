{"version":3,"file":"dummy.js","sourceRoot":"","sources":["dummy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Json } from '../../../../../types/common';\nimport { ResultIsNotACollection } from '../../../errors';\n\nexport class Rating {\n  source: string;\n  value: string;\n\n  constructor(source: string, value: string) {\n    this.source = source;\n    this.value = value;\n  }\n\n  get type() {\n    if (this.source === 'Internet Movie Database') {\n      return 'imdbRating';\n    }\n\n    if (this.source === 'Rotten Tomatoes') {\n      return 'rottenTomatoes';\n    }\n\n    if (this.source === 'Metacritic') {\n      return 'metacritic';\n    }\n\n    return 'unknown';\n  }\n}\n\nabstract class DummyResult {\n  private collection?: Json[];\n  protected currentResponse: Json;\n  private index?: number;\n  type: string;\n  error?: Error;\n\n  constructor(type = 'film') {\n    this.type = type;\n    this.currentResponse = this.getRawResponse();\n  }\n\n  setCollection(collection: Json[]) {\n    this.collection = collection;\n    this.index = 0;\n    this.currentResponse = this.collection[this.index];\n  }\n\n  setSingleResult(result: {}) {\n    this.collection = undefined;\n    this.index = 0;\n    this.currentResponse = result;\n  }\n\n  get title() {\n    return this.currentResponse.title;\n  }\n\n  get rated() {\n    return this.currentResponse.rated;\n  }\n\n  get released() {\n    return this.currentResponse.released;\n  }\n\n  get runtime() {\n    return this.currentResponse.runtime;\n  }\n\n  get genre() {\n    return this.currentResponse.genre;\n  }\n\n  get director() {\n    return this.currentResponse.director;\n  }\n\n  get writers() {\n    return this.currentResponse.writers;\n  }\n\n  get actors() {\n    return this.currentResponse.actors;\n  }\n\n  get plot() {\n    return this.currentResponse.plot;\n  }\n\n  get language() {\n    return this.currentResponse.language;\n  }\n\n  get country() {\n    return this.currentResponse.country;\n  }\n\n  get awards() {\n    return this.currentResponse.awards;\n  }\n\n  get poster() {\n    return this.currentResponse.poster;\n  }\n\n  get ratings(): Rating[] {\n    return this.currentResponse.ratings;\n  }\n\n  get imdbId() {\n    return this.currentResponse.imdbId;\n  }\n\n  get production() {\n    return this.currentResponse.production;\n  }\n\n  get imdbRating() {\n    const ratings = this.ratings.filter((rating) => rating.type === 'imdbRating');\n    const rating = ratings[0];\n\n    return rating.value;\n  }\n\n  withError(error: Error) {\n    this.error = error;\n  }\n\n  isRequestSuccesful() {\n    return !this.error;\n  }\n\n  next() {\n    if (!this.isCollection()) {\n      throw new ResultIsNotACollection();\n    }\n\n    this.setNextIndex();\n    this.setCursor();\n  }\n\n  isMovie() {\n    return this.currentResponse.type === 'film';\n  }\n\n  isSerie() {\n    return this.currentResponse.type === 'serie';\n  }\n\n  private setNextIndex() {\n    if (!this.index) {\n      this.index = 1;\n    }\n\n    this.index += 1;\n  }\n\n  private setCursor() {\n    if (!this.isCollection()) {\n      throw new ResultIsNotACollection();\n    }\n\n    if (!this.collection) {\n      this.collection = []\n    }\n\n    if (!this.index) {\n      this.index = 0;\n    }\n\n    this.currentResponse = this.collection[this.index];\n  }\n\n  private isCollection() {\n    return !!this.collection;\n  }\n\n  abstract getRawResponse(): Json\n}\n\nexport default DummyResult;\n"]}