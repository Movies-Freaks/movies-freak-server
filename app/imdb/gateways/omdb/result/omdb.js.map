{"version":3,"file":"omdb.js","sourceRoot":"","sources":["omdb.ts"],"names":[],"mappings":"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","sourcesContent":["import { ResultIsNotACollection } from '../../../errors';\n\nclass Rating {\n  source: string;\n  value: string;\n\n  constructor(source: string, value: string) {\n    this.source = source;\n    this.value = value;\n  }\n\n  get type() {\n    if (this.source === 'Internet Movie Database') {\n      return 'imdbRating';\n    }\n\n    if (this.source === 'Rotten Tomatoes') {\n      return 'rottenTomatoes';\n    }\n\n    if (this.source === 'Metacritic') {\n      return 'metacritic';\n    }\n\n    return 'unknown';\n  }\n}\n\nclass OMDBResult {\n  private index: number;\n  private rawResponse: any;\n  protected currentResponse: any;\n  type?: string;\n\n  constructor(rawResponse: any) {\n    this.rawResponse = rawResponse;\n    this.index = 0;\n\n    this.currentResponse = this.isCollection() ? rawResponse.Search[this.index] : rawResponse;\n  }\n\n  get title() {\n    return this.currentResponse.Title;\n  }\n\n  get rated() {\n    return this.currentResponse.Rated;\n  }\n\n  get released() {\n    return this.currentResponse.Released;\n  }\n\n  get runtime() {\n    return this.currentResponse.Runtime;\n  }\n\n  get genre() {\n    return this.currentResponse\n      .Genre\n      .split(',')\n      .map((genre: string) => genre.trim());\n  }\n\n  get director() {\n    return this.currentResponse.Director;\n  }\n\n  get writers() {\n    return this.currentResponse\n      .Writer\n      .split(',')\n      .map((writer: string) => writer.trim());\n  }\n\n  get actors() {\n    return this.currentResponse\n      .Actors\n      .split(',')\n      .map((actor: string) => actor.trim());\n  }\n\n  get plot() {\n    return this.currentResponse.Plot;\n  }\n\n  get language() {\n    return this.currentResponse.Language;\n  }\n\n  get country() {\n    return this.currentResponse.Country;\n  }\n\n  get awards() {\n    return this.currentResponse.Awards;\n  }\n\n  get poster() {\n    return this.currentResponse.Poster;\n  }\n\n  get ratings() {\n    return this.currentResponse.Ratings.map((item: any) => {\n      return new Rating(item.Source, item.Value);\n    });\n  }\n\n  get imdbId() {\n    return this.currentResponse.imdbID;\n  }\n\n  get production() {\n    return this.currentResponse.Production;\n  }\n\n  get error() {\n    return this.rawResponse.Error;\n  }\n\n  get imdbRating() {\n    const ratings = this.ratings.filter((rating: Rating) => rating.type === 'imdbRating');\n    const rating = ratings[0];\n\n    return rating.value;\n  }\n\n  isMovie() {\n    return this.type === 'film';\n  }\n\n  isSerie() {\n    return this.type === 'serie';\n  }\n\n  isEpisode() {\n    return this.type === 'episode';\n  }\n\n  isRequestSuccesful() {\n    return JSON.parse(this.rawResponse?.Response?.toLowerCase());\n  }\n\n  next() {\n    if (!this.isCollection()) {\n      throw new ResultIsNotACollection();\n    }\n\n    this.setNextIndex();\n    this.setCursor();\n  }\n\n  private setNextIndex() {\n    this.index += 1;\n  }\n\n  private setCursor() {\n    if (!this.isCollection()) {\n      throw new ResultIsNotACollection();\n    }\n\n    this.currentResponse = this.rawResponse.Search[this.index];\n  }\n\n  private isCollection() {\n    return !!this.rawResponse.Search;\n  }\n}\n\nexport default OMDBResult;\n"]}