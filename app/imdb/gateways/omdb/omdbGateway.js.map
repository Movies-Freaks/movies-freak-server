{"version":3,"file":"omdbGateway.js","sourceRoot":"","sources":["omdbGateway.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { get as getKey } from 'lodash';\n\nimport { IMDBError, IncorrectIMDBId, InvalidAPIKey } from '../../errors';\nimport { IMDBQueryObject, IMDBResultType, IMDBType } from '../../../../types/app';\nimport {\n  FilmResult,\n  Result,\n  TVEpisodeResult,\n  TVSeasonResult,\n  TVSerieResult\n} from './result';\n\nclass OMDBGateway {\n  private host: string;\n  private apiKey: string;\n\n  constructor(host: string, apiKey: string) {\n    this.host = host;\n    this.apiKey = apiKey;\n  }\n\n  fetchFilmById(imdbId: string) {\n    const query: IMDBQueryObject = {\n      type: IMDBType.MOVIE,\n      i: imdbId\n    };\n\n    return this.request<FilmResult>(query, IMDBResultType.FILM);\n  }\n\n  fetchTVSerieById(imdbId: string) {\n    const query: IMDBQueryObject = {\n      type: IMDBType.SERIES,\n      i: imdbId\n    };\n\n    return this.request<TVSerieResult>(query, IMDBResultType.SERIE);\n  }\n\n  fetchTVSeasonBySerieId(serieImdbId: string, seasonNumber: number) {\n    const query: IMDBQueryObject = {\n      i: serieImdbId,\n      type: IMDBType.SERIES,\n      Season: seasonNumber\n    };\n\n    return this.request<TVSeasonResult>(query, IMDBResultType.SEASON);\n  }\n\n  fetchTVEpisodeById(imdbId: string) {\n    const query: IMDBQueryObject = {\n      i: imdbId,\n      type: IMDBType.EPISODE\n    };\n\n    return this.request<TVEpisodeResult>(query, IMDBResultType.EPISODE);\n  }\n\n  async request<T>(query: IMDBQueryObject, type: IMDBResultType): Promise<T> {\n    const params = Object.keys(query)\n      .map((key) => `${key}=${getKey(query, key)}`)\n      .join('&');\n\n    let response: { data: {} };\n\n    try {\n      response = await axios\n        .get(`${this.host}?apikey=${this.apiKey}&${params}`);\n    } catch (error: any) {\n      response = error.response;\n    }\n\n    let omdbResult: any;\n\n    switch (type) {\n      case IMDBResultType.FILM:\n        omdbResult = new FilmResult(response.data);\n        break;\n      case IMDBResultType.SERIE:\n        omdbResult = new TVSerieResult(response.data);\n        break;\n      case IMDBResultType.SEASON:\n        omdbResult = new TVSeasonResult(response.data);\n        break;\n      case IMDBResultType.EPISODE:\n        omdbResult = new TVEpisodeResult(response.data);\n        break;\n      default:\n        omdbResult = new Result(response.data);\n    }\n\n    if (omdbResult.isRequestSuccesful()) {\n      return omdbResult;\n    }\n\n    if (this.isIMDBIdError(omdbResult.error)) {\n      throw new IncorrectIMDBId();\n    }\n\n    if (this.isInvalidAPIKeyError(omdbResult.error)) {\n      throw new InvalidAPIKey();\n    }\n\n    throw new IMDBError(omdbResult.error);\n  }\n\n  private isIMDBIdError(error?: string) {\n    return error === 'Incorrect IMDb ID.';\n  }\n\n  private isInvalidAPIKeyError(error?: string) {\n    return error === 'Invalid API key!';\n  }\n}\n\nexport default OMDBGateway;\n"]}