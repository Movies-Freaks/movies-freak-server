{"version":3,"file":"httpResponses.js","sourceRoot":"","sources":["httpResponses.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAIpD,MAAM,CAAN,IAAY,UAQX;AARD,WAAY,UAAU;IACpB,yCAA2B,CAAA;IAC3B,2CAA6B,CAAA;IAC7B,qCAAuB,CAAA;IACvB,qCAAuB,CAAA;IACvB,mCAAqB,CAAA;IACrB,yDAA2C,CAAA;IAC3C,mDAAqC,CAAA;AACvC,CAAC,EARW,UAAU,KAAV,UAAU,QAQrB;AAED,MAAM,OAAO,SAAU,SAAQ,KAAK;IAKlC,YAAY,UAA0B,EAAE,IAAY,EAAE,KAAY;QAChE,KAAK,CAAC,YAAY,CAAC,CAAC;QAEpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,KAAK,GAAG;gBACX,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAA;QACH,CAAC;IACH,CAAC;IAED,IAAI,OAAO;QACT,MAAM,OAAO,GAAU;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;QAEF,IAAI,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC1C,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IAAI,KAAK;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,yBACK,IAAI,CAAC,KAAK,EACb;IACJ,CAAC;IAEO,gBAAgB;QACtB,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;IAC/C,CAAC;CACF;AAED,MAAM,OAAO,YAAa,SAAQ,SAAS;IACzC,YAAY,OAAe,UAAU,CAAC,SAAS,EAAE,KAAY;QAC3D,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;CACF;AAED,MAAM,OAAO,YAAa,SAAQ,SAAS;IACzC,YAAY,OAAe,UAAU,CAAC,QAAQ,EAAE,KAAY;QAC1D,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;CACF;AAED,MAAM,OAAO,iBAAkB,SAAQ,SAAS;IAC9C,YAAY,KAAW;QACrB,KAAK,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;CACF","sourcesContent":["import { HTTPStatusCode } from '../boardGame/types';\nimport { Error } from '../types/api';\nimport { Json } from '../types/common';\n\nexport enum ErrorCodes {\n  BAD_REQUEST = 'BAD_REQUEST',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  FORBIDDEN = 'FORBIDDEN',\n  NOT_FOUND = 'NOT_FOUND',\n  CONFLICT = 'CONFLICT',\n  PRECONDITION_FAILED = 'PRECONDITION_FAILED',\n  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR'\n}\n\nexport class HTTPError extends Error {\n  private code: string;\n  private error?: Json;\n  readonly statusCode: HTTPStatusCode\n\n  constructor(statusCode: HTTPStatusCode, code: string, error?: Json) {\n    super('HTTP error');\n\n    this.code = code;\n    this.statusCode = statusCode;\n\n    if (error) {\n      this.error = {\n        name: error.name,\n        message: error.message\n      }\n    }\n  }\n\n  get payload() {\n    const payload: Error = {\n      code: this.code\n    };\n\n    if (this.isDevelopmentEnv() && this.error) {\n      payload.error = this.cause;\n    }\n\n    return payload;\n  }\n\n  get cause() {\n    if (!this.error) {\n      return {};\n    }\n\n    return {\n      ...this.error\n    };\n  }\n\n  private isDevelopmentEnv() {\n    return process.env.NODE_ENV !== 'production';\n  }\n}\n\nexport class HTTPNotFound extends HTTPError {\n  constructor(code: string = ErrorCodes.NOT_FOUND, cause?: Json) {\n    super(HTTPStatusCode.NOT_FOUND, code, cause);\n  }\n}\n\nexport class HTTPConflict extends HTTPError {\n  constructor(code: string = ErrorCodes.CONFLICT, cause?: Json) {\n    super(HTTPStatusCode.CONFLICT, code, cause);\n  }\n}\n\nexport class HTTPInternalError extends HTTPError {\n  constructor(error: Json) {\n    super(HTTPStatusCode.UNEXPECTED_ERROR, ErrorCodes.UNEXPECTED_ERROR, error);\n  }\n}\n"]}