{"version":3,"file":"tvSerie.js","sourceRoot":"","sources":["tvSerie.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAA2B,MAAM,0BAA0B,CAAC;AAEnF,OAAO,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAElE,MAAM,eAAgB,SAAQ,QAAQ;IAC9B,KAAK,CAAC,EAAE,MAAM,EAAW;;YAC7B,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;YAC7B,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAElD,IAAI,OAAgB,CAAC;YAErB,IAAI,CAAC;gBACH,OAAO,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACxD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,eAAe,EAAE,CAAC;oBACrC,MAAM,IAAI,YAAY,CAAC,oBAAoB,CAAC,CAAC;gBAC/C,CAAC;gBAED,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC;aACzC,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,eAAe,CAAC","sourcesContent":["import { Monopoly } from '../../../boardGame';\nimport { HTTPStatusCode, Request, SingleResponse } from '../../../boardGame/types';\n\nimport { HTTPInternalError, HTTPNotFound } from '../../httpResponses';\nimport { TVSerie } from '../../../app/moviesFreak/entities';\nimport { TVSerieNotFound } from '../../../database/stores/errors';\n\nclass TVSerieResource extends Monopoly {\n  async onGet({ params }: Request): Promise<SingleResponse> {\n    const { tvSerieId } = params;\n    const { database, presenters } = this.getTitles();\n\n    let tvSerie: TVSerie;\n\n    try {\n      tvSerie = await database.tvSeries.findById(tvSerieId);\n    } catch (error: any) {\n      if (error instanceof TVSerieNotFound) {\n        throw new HTTPNotFound('TV_SERIE_NOT_FOUND');\n      }\n\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.OK,\n      data: presenters.presentTVSerie(tvSerie)\n    };\n  }\n}\n\nexport default TVSerieResource;\n"]}