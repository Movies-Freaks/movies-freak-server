{"version":3,"file":"film.js","sourceRoot":"","sources":["film.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAA2B,MAAM,0BAA0B,CAAC;AACnF,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAE9C,OAAO,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAS/D,MAAM,YAAa,SAAQ,QAAQ;IAC3B,KAAK,CAAC,GAAgB;;YAC1B,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,EAAE,MAAM,EAAE,GAAE,GAAG,CAAC,MAAM,CAAC;YAE7B,IAAI,IAAU,CAAC;YAEf,IAAI,CAAC;gBACH,IAAI,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC/C,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,YAAY,EAAE,CAAC;oBAClC,MAAM,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBAC3C,CAAC;gBAED,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,IAAI,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;aACnC,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,YAAY,CAAC","sourcesContent":["import { HTTPStatusCode, Request, SingleResponse } from '../../../boardGame/types';\nimport { Monopoly } from '../../../boardGame';\n\nimport { HTTPInternalError, HTTPNotFound } from '../../httpResponses';\nimport { Film } from '../../../app/moviesFreak/entities';\nimport { FilmNotFound } from '../../../database/stores/errors';\nimport { UUID } from '../../../types/common';\n\ninterface FilmRequest extends Request {\n  params: {\n    filmId: UUID\n  }\n}\n\nclass FilmResource extends Monopoly {\n  async onGet(req: FilmRequest): Promise<SingleResponse> {\n    const { database, presenters } = this.getTitles();\n    const { filmId }= req.params;\n\n    let film: Film;\n\n    try {\n      film = await database.films.findById(filmId);\n    } catch (error: any) {\n      if (error instanceof FilmNotFound) {\n        throw new HTTPNotFound('FILM_NOT_FOUND');\n      }\n\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.OK,\n      data: presenters.presentFilm(film)\n    };\n  }\n}\n\nexport default FilmResource;\n"]}