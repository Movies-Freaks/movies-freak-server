{"version":3,"file":"signUp.js","sourceRoot":"","sources":["signUp.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAA2B,MAAM,0BAA0B,CAAC;AAEnF,OAAO,QAAQ,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAcxF,MAAM,MAAO,SAAQ,QAAQ;IACrB,MAAM,CAAC,EAAE,IAAI,EAAiB;;YAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAE5C,IAAI,OAAgB,CAAC;YAErB,IAAI,CAAC;gBACH,OAAO,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,gBAAgB,EAAE,CAAC;oBACtC,MAAM,IAAI,YAAY,CAAC,oBAAoB,CAAC,CAAC;gBAC/C,CAAC;gBAED,IAAI,KAAK,YAAY,mBAAmB,EAAE,CAAC;oBACzC,MAAM,IAAI,YAAY,CAAC,uBAAuB,CAAC,CAAC;gBAClD,CAAC;gBAED,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAE9C,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,OAAO;gBAC9B,IAAI,EAAE,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC;aACxC,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,MAAM,CAAC","sourcesContent":["import { Monopoly } from '../../../boardGame';\nimport { HTTPStatusCode, Request, SingleResponse } from '../../../boardGame/types';\n\nimport Register from '../../../app/moviesFreak/signUp';\nimport { HTTPConflict, HTTPInternalError } from '../../httpResponses';\nimport { EmailAlreadyUsed, UsernameAlreadyUsed } from '../../../app/moviesFreak/errors';\nimport { Session } from '../../../app/moviesFreak/entities';\n\ninterface SignUpRequest extends Request {\n  body: {\n    name: string;\n    username: string;\n    lastName: string;\n    password: string;\n    email: string;\n    birthdate: Date;\n  }\n}\n\nclass SignUp extends Monopoly {\n  async onPost({ body }: SignUpRequest): Promise<SingleResponse> {\n    const database = this.getTitle('database');\n    const signUp = new Register(database, body);\n\n    let session: Session;\n\n    try {\n      session = await signUp.execute();\n    } catch (error: any) {\n      if (error instanceof EmailAlreadyUsed) {\n        throw new HTTPConflict('EMAIL_ALREADY_USED');\n      }\n\n      if (error instanceof UsernameAlreadyUsed) {\n        throw new HTTPConflict('USERNAME_ALREADY_USED');\n      }\n\n      throw new HTTPInternalError(error);\n    }\n\n    const presenter = this.getTitle('presenters');\n\n    return {\n      status: HTTPStatusCode.CREATED,\n      data: presenter.presentSession(session)\n    };\n  }\n}\n\nexport default SignUp;\n"]}