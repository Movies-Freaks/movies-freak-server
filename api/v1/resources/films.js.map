{"version":3,"file":"films.js","sourceRoot":"","sources":["films.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EACL,cAAc,EAIf,MAAM,0BAA0B,CAAC;AAElC,OAAO,UAAU,MAAM,qCAAqC,CAAC;AAC7D,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAIxD,MAAM,aAAc,SAAQ,QAAQ;IAC5B,MAAM,CAAC,OAAgB;;YAC3B,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEpE,IAAI,MAAY,CAAC;YAEjB,IAAI,CAAC;gBACH,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,OAAO;gBAC9B,IAAI,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;aACrC,CAAC;QACJ,CAAC;KAAA;IAEK,KAAK,CAAC,EAAE,KAAK,EAAW;;YAC5B,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YAExC,IAAI,MAA2B,CAAC;YAEhC,IAAI,CAAC;gBACH,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,IAAI,EAAE;oBACJ,IAAI;oBACJ,KAAK;oBACL,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,KAAK,EAAE,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC7C;aACF,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,aAAa,CAAC","sourcesContent":["import { Monopoly } from '../../../boardGame';\nimport {\n  HTTPStatusCode,\n  MultipleRespponse,\n  Request,\n  SingleResponse\n} from '../../../boardGame/types';\n\nimport CreateFilm from '../../../app/moviesFreak/createFilm';\nimport { HTTPInternalError } from '../../httpResponses';\nimport { Film } from '../../../app/moviesFreak/entities';\nimport { QueryResponse } from '../../../types/database';\n\nclass FilmsResource extends Monopoly {\n  async onPost(request: Request): Promise<SingleResponse> {\n    const { database, imdb, presenters } = this.getTitles();\n    const useCase = new CreateFilm(database, imdb, request.body.imdbId);\n\n    let result: Film;\n\n    try {\n      result = await useCase.execute();\n    } catch (error: any) {\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.CREATED,\n      data: presenters.presentFilm(result)\n    };\n  }\n\n  async onGet({ query }: Request): Promise<MultipleRespponse> {\n    const { database, presenters } = this.getTitles();\n    const skip = Number(query.skip || 0);\n    const limit = Number(query.limit || 25);\n\n    let result: QueryResponse<Film>;\n\n    try {\n      result = await database.films.find({ skip, limit });\n    } catch (error: any) {\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.OK,\n      data: {\n        skip,\n        limit,\n        totalItems: result.totalItems,\n        items: presenters.presentFilms(result.items)\n      }\n    };\n  }\n}\n\nexport default FilmsResource;\n"]}