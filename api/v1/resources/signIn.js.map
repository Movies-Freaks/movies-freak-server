{"version":3,"file":"signIn.js","sourceRoot":"","sources":["signIn.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAG,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAA2B,MAAM,0BAA0B,CAAC;AAEnF,OAAO,KAAK,MAAM,iCAAiC,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAEhF,OAAO,EACL,YAAY,EACZ,iBAAiB,EACjB,YAAY,EACb,MAAM,qBAAqB,CAAC;AAE7B,MAAM,MAAO,SAAQ,QAAQ;IACrB,MAAM,CAAC,EAAE,IAAI,EAAW;;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhE,IAAI,OAAgB,CAAC;YAErB,IAAI,CAAC;gBACH,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YAClC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,IAAI,KAAK,YAAY,YAAY,EAAE,CAAC;oBAClC,MAAM,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBAC3C,CAAC;gBAED,IAAI,KAAK,YAAY,eAAe,EAAE,CAAC;oBACrC,MAAM,IAAI,YAAY,CAAC,yBAAyB,CAAC,CAAC;gBACpD,CAAC;gBAED,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAE9C,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,IAAI,EAAE,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC;aACxC,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,MAAM,CAAC","sourcesContent":["import { Monopoly  } from '../../../boardGame';\nimport { HTTPStatusCode, Request, SingleResponse } from '../../../boardGame/types';\n\nimport Login from '../../../app/moviesFreak/signIn';\nimport { InvalidPassword, UserNotFound } from '../../../app/moviesFreak/errors';\nimport { Session } from '../../../app/moviesFreak/entities';\nimport {\n  HTTPConflict,\n  HTTPInternalError,\n  HTTPNotFound\n} from '../../httpResponses';\n\nclass SignIn extends Monopoly {\n  async onPost({ body }: Request): Promise<SingleResponse> {\n    const database = this.getTitle('database');\n    const login = new Login(database, body.username, body.password);\n\n    let session: Session;\n\n    try {\n      session = await login.execute();\n    } catch (error: any) {\n      if (error instanceof UserNotFound) {\n        throw new HTTPNotFound('USER_NOT_FOUND');\n      }\n\n      if (error instanceof InvalidPassword) {\n        throw new HTTPConflict('PASSWORD_DOES_NOT_MATCH');\n      }\n\n      throw new HTTPInternalError(error);\n    }\n\n    const presenter = this.getTitle('presenters');\n\n    return {\n      status: HTTPStatusCode.OK,\n      data: presenter.presentSession(session)\n    };\n  }\n}\n\nexport default SignIn;\n"]}