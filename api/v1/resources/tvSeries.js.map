{"version":3,"file":"tvSeries.js","sourceRoot":"","sources":["tvSeries.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EACL,cAAc,EAIf,MAAM,0BAA0B,CAAC;AAElC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAIxD,MAAM,gBAAiB,SAAQ,QAAQ;IAC/B,MAAM,CAAC,EAAE,IAAI,EAAW;;YAC5B,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACxD,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAE/D,IAAI,MAAe,CAAC;YAEpB,IAAI,CAAC;gBACH,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YACnC,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,OAAO;gBAC9B,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC;aACxC,CAAC;QACJ,CAAC;KAAA;IAEK,KAAK,CAAC,EAAE,KAAK,EAAW;;YAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YACxC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAElD,IAAI,MAA8B,CAAC;YAEnC,IAAI,CAAC;gBACH,MAAM,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YACzD,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,OAAO;gBACL,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,IAAI,EAAE;oBACJ,IAAI;oBACJ,KAAK;oBACL,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,KAAK,EAAE,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChD;aACF,CAAC;QACJ,CAAC;KAAA;CACF;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["import { Monopoly } from '../../../boardGame';\nimport {\n  HTTPStatusCode,\n  MultipleRespponse,\n  Request,\n  SingleResponse\n} from '../../../boardGame/types';\n\nimport CreateTVSerie from '../../../app/moviesFreak/createTVSerie';\nimport { HTTPInternalError } from '../../httpResponses';\nimport { QueryResponse } from '../../../types/database';\nimport { TVSerie } from '../../../app/moviesFreak/entities';\n\nclass TVSeriesResource extends Monopoly {\n  async onPost({ body }: Request): Promise<SingleResponse> {\n    const { database, imdb, presenters } = this.getTitles();\n    const useCase = new CreateTVSerie(database, imdb, body.imdbId);\n\n    let result: TVSerie;\n\n    try {\n      result = await useCase.execute();\n    } catch (error: any) {\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.CREATED,\n      data: presenters.presentTVSerie(result)\n    };\n  }\n\n  async onGet({ query }: Request): Promise<MultipleRespponse> {\n    const skip = Number(query.skip || 0);\n    const limit = Number(query.limit || 25);\n    const { database, presenters } = this.getTitles();\n\n    let result: QueryResponse<TVSerie>;\n\n    try {\n      result = await database.tvSeries.find({ skip, limit });\n    } catch (error: any) {\n      throw new HTTPInternalError(error);\n    }\n\n    return {\n      status: HTTPStatusCode.OK,\n      data: {\n        skip,\n        limit,\n        totalItems: result.totalItems,\n        items: presenters.presentTVSeries(result.items)\n      }\n    };\n  }\n}\n\nexport default TVSeriesResource;\n"]}